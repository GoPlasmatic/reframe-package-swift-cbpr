{
    "id": "mt103-retn-document-mapper",
    "name": "MT103 RETN to pacs.004 Document Mapping for CBPR+",
    "description": "Maps MT103 RETN message to ISO 20022 pacs.004.001.09 PaymentReturnV09 document structure according to CBPR+ return translation specification",
    "priority": 5,
    "condition": { "and": [
        {"==": [{"var": "metadata.direction"}, "outgoing"]},
        {"==": [{"var": "metadata.SwiftMT.message_type"}, "103"]},
        {"==": [{"var": "metadata.SwiftMT.method"}, "return"]},
        {"==": [{"var": "metadata.progress.workflow_id"}, "mt103-retn-precondition"]},
        {"==": [{"var": "metadata.progress.task_id"}, "PREC004_final_mref_validation"]},
        {"==": [{"var": "metadata.progress.status_code"}, 200]}
    ]},
    "tasks": [
        {
            "id": "METAFCT004_settlement_method_determination",
            "name": "METAFCT004: Settlement Method Determination for Returns",
            "description": "Implements settlement method logic for return payments - returns can only be serial with field 55A validation",
            "function": {
                "name": "validate",
                "input": {
                    "rules": [
                        {
                            "path": "data.SwiftMT.fields.55A",
                            "logic": {"!": {"var": "data.SwiftMT.fields.55A"}},
                            "message": "Translation stopped: Field 55A Third Reimbursement Institution is not allowed in return payments (T20008)"
                        }
                    ]
                }
            }
        },
        {
            "id": "METAFCT004_settlement_method_mapping",
            "name": "METAFCT004: Settlement Method Mapping",
            "description": "Maps settlement method and account information for return payments",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.settlement_method",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.53B.party_identifier"},
                                { "if": [
                                    {"starts_with": [{"var": "data.SwiftMT.fields.53B.party_identifier"}, "/C"]},
                                    "INGA",
                                    "INDA"
                                ]},
                                "INDA"
                            ]}
                        },
                        {
                            "path": "temp_data.settlement_account",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.53B.party_identifier"},
                                { "if": [
                                    {"starts_with": [{"var": "data.SwiftMT.fields.53B.party_identifier"}, "/"]},
                                    {"substr": [{"var": "data.SwiftMT.fields.53B.party_identifier"}, 1]},
                                    ""
                                ]},
                                ""
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "create_payment_return_structure",
            "name": "Create PaymentReturnV09 Structure",
            "description": "Constructs pacs.004 group header with message identification, creation timestamp, transaction count, and settlement information using structural output",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.GrpHdr",
                            "logic": {
                                "MsgId": { "if": [
                                    { "or": [
                                        {"var": "data.SwiftMT.fields.20.reference"},
                                        {"var": "data.SwiftMT.fields.20.reference"}
                                    ]},
                                    { "or": [
                                        {"var": "data.SwiftMT.fields.20.reference"},
                                        {"var": "data.SwiftMT.fields.20.reference"}
                                    ]},
                                    "NOTPROVIDED"
                                ]},
                                "CreDtTm": "9999-12-31T00:00:00+00:00",
                                "NbOfTxs": "1",
                                "SttlmInf": {
                                    "SttlmMtd": {"var": "temp_data.settlement_method"},
                                    "SttlmAcct": { "if": [
                                        { "and": [
                                            {"var": "temp_data.settlement_account"},
                                            {"!=": [{"var": "temp_data.settlement_account"}, ""]}
                                        ]},
                                        {"Id": {"Othr": {"Id": {"var": "temp_data.settlement_account"}}}},
                                        null
                                    ]}
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "id": "map_transaction_information",
            "name": "Map Transaction Information",
            "description": "Maps complete transaction information including return identification, original references, settlement amounts, dates, charge bearer, and agents using structural output",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf",
                            "logic": {
                                "RtrId": { "if": [
                                    { "or": [
                                        {"var": "data.SwiftMT.fields.20.reference"},
                                        {"var": "data.SwiftMT.fields.20.reference"}
                                    ]},
                                    { "or": [
                                        {"var": "data.SwiftMT.fields.20.reference"},
                                        {"var": "data.SwiftMT.fields.20.reference"}
                                    ]},
                                    "NOTPROVIDED"
                                ]},
                                "OrgnlUETR": { "if": [
                                    { "or": [
                                        {"var": "data.SwiftMT.user_header.unique_end_to_end_reference"},
                                        {"var": "data.SwiftMT.user_header.121"}
                                    ]},
                                    { "or": [
                                        {"var": "data.SwiftMT.user_header.unique_end_to_end_reference"},
                                        {"var": "data.SwiftMT.user_header.121"}
                                    ]},
                                    "NOTPROVIDED"
                                ]},
                                "OrgnlInstrId": {"var": "temp_data.original_instruction_id"},
                                "OrgnlEndToEndId": {"var": "temp_data.original_end_to_end_id"},
                                "RtrdIntrBkSttlmAmt": {
                                    "@Ccy": {"var": "data.SwiftMT.fields.32A.currency"},
                                    "$value": {"+": {"var": "data.SwiftMT.fields.32A.amount"}}
                                },
                                "IntrBkSttlmDt": {"var": "data.SwiftMT.fields.32A.value_date"},
                                "ChrgBr": { "if": [
                                    {"var": "data.SwiftMT.fields.71A.code"},
                                    { "if": [
                                        {"==": [{"var": "data.SwiftMT.fields.71A.code"}, "BEN"]},
                                        "CRED",
                                        "SHAR"
                                    ]},
                                    "SHAR"
                                ]},
                                "InstgAgt": {"FinInstnId": {"BICFI": {"var": "temp_data.Sender"}}},
                                "InstdAgt": {"FinInstnId": {"BICFI": {"var": "temp_data.Receiver"}}}
                            }
                        }
                    ]
                }
            }
        },
        {
            "id": "TR016_debtor_party_agent_logic",
            "name": "TR016: Debtor Party vs Agent Determination Logic",
            "description": "Implements TR016 logic to determine if field 50K should map to Debtor/Party or Debtor/Agent based on account and name structure",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.debtor_is_agent",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.50K"},
                                { "and": [
                                    {"==": [{"var": "data.SwiftMT.fields.50K.account"}, "/NOTPROVIDED"]},
                                    {"starts_with": [{"var": "data.SwiftMT.fields.50K.name_and_address.0"}, "//"]}
                                ]},
                                false
                            ]}
                        },
                        {
                            "path": "temp_data.debtor_name",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.50K.name_and_address"},
                                { "if": [
                                    {"var": "temp_data.debtor_is_agent"},
                                    "NOTPROVIDED",
                                    { "if": [
                                        {">": [{"length": {"var": "data.SwiftMT.fields.50K.name_and_address"}}, 1]},
                                        {"var": "data.SwiftMT.fields.50K.name_and_address.1"},
                                        {"var": "data.SwiftMT.fields.50K.name_and_address.0"}
                                    ]}
                                ]},
                                { "if": [
                                    {"var": "data.SwiftMT.fields.50A.name_and_address"},
                                    {"var": "data.SwiftMT.fields.50A.name_and_address.0"},
                                    { "if": [
                                        {"var": "data.SwiftMT.fields.50F.name_and_address"},
                                        {"var": "data.SwiftMT.fields.50F.name_and_address.1"},
                                        "NOTPROVIDED"
                                    ]}
                                ]}
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "TR017_creditor_party_agent_logic",
            "name": "TR017: Creditor Party vs Agent Determination Logic",
            "description": "Implements TR017 logic to determine if field 59 should map to Creditor/Party or Creditor/Agent based on account and name structure",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.creditor_is_agent",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.59"},
                                { "and": [
                                    {"==": [{"var": "data.SwiftMT.fields.59.account"}, "/NOTPROVIDED"]},
                                    {"starts_with": [{"var": "data.SwiftMT.fields.59.name_and_address.0"}, "//"]}
                                ]},
                                false
                            ]}
                        },
                        {
                            "path": "temp_data.creditor_name",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.59.name_and_address"},
                                { "if": [
                                    {"var": "temp_data.creditor_is_agent"},
                                    "NOTPROVIDED",
                                    { "if": [
                                        {">": [{"length": [{"var": "data.SwiftMT.fields.59.name_and_address"}]}, 1]},
                                        {"var": "data.SwiftMT.fields.59.name_and_address.1"},
                                        {"var": "data.SwiftMT.fields.59.name_and_address.0"}
                                    ]}
                                ]},
                                { "if": [
                                    {"var": "data.SwiftMT.fields.59A.name_and_address"},
                                    {"var": "data.SwiftMT.fields.59A.name_and_address.0"},
                                    { "if": [
                                        {"var": "data.SwiftMT.fields.59F.name_and_address"},
                                        {"var": "data.SwiftMT.fields.59F.name_and_address.1"},
                                        "NOTPROVIDED"
                                    ]}
                                ]}
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "map_return_chain",
            "name": "Map Return Chain Information with TR016/TR017",
            "description": "Constructs return chain information with proper party vs agent determination logic using TR016/TR017",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrChain",
                            "logic": {
                                "Dbtr": { "if": [
                                    {"var": "temp_data.debtor_is_agent"},
                                    {
                                        "Agt": {
                                            "FinInstnId": {
                                                "ClrSysMmbId": {"MmbId": {"substr": [{"var": "data.SwiftMT.fields.50K.name_and_address.0"}, 2]}},
                                                "Nm": "NOTPROVIDED",
                                                "PstlAdr": {"AdrLine": ["NOTPROVIDED"]}
                                            }
                                        }
                                    },
                                    {
                                        "Pty": {
                                            "Nm": {"var": "temp_data.debtor_name"},
                                            "Id": {"OrgId": {"Othr": [{"Id": "NOTPROVIDED", "SchmeNm": {"Cd": "TXID"}}]}}
                                        }
                                    }
                                ]},
                                "DbtrAgt": {
                                    "FinInstnId": {
                                        "BICFI": { "if": [
                                            {"var": "data.SwiftMT.fields.52A.bic"},
                                            {"var": "data.SwiftMT.fields.52A.bic"},
                                            ""
                                        ]}
                                    }
                                },
                                "Cdtr": { "if": [
                                    {"var": "temp_data.creditor_is_agent"},
                                    {
                                        "Agt": {
                                            "FinInstnId": {
                                                "ClrSysMmbId": {"MmbId": {"substr": [{"var": "data.SwiftMT.fields.59.name_and_address.0"}, 2]}},
                                                "Nm": "NOTPROVIDED",
                                                "PstlAdr": {"AdrLine": ["NOTPROVIDED"]}
                                            }
                                        }
                                    },
                                    {
                                        "Pty": {
                                            "Nm": {"var": "temp_data.creditor_name"},
                                            "Id": {"OrgId": {"Othr": [{"Id": "NOTPROVIDED", "SchmeNm": {"Cd": "TXID"}}]}}
                                        }
                                    }
                                ]},
                                "CdtrAgt": {
                                    "FinInstnId": {
                                        "BICFI": { "if": [
                                            {"var": "data.SwiftMT.fields.57A.bic"},
                                            {"var": "data.SwiftMT.fields.57A.bic"},
                                            ""
                                        ]}
                                    }
                                },
                                "IntrmyAgt1": { "if": [
                                    {"var": "data.SwiftMT.fields.56A"},
                                    {
                                        "FinInstnId": {
                                            "BICFI": { "if": [
                                                {"var": "data.SwiftMT.fields.56A.bic"},
                                                {"var": "data.SwiftMT.fields.56A.bic"},
                                                ""
                                            ]}
                                        }
                                    },
                                    null
                                ]}
                            }
                        }
                    ]
                }
            }
        },
        {
            "id": "map_return_reason_information",
            "name": "Map Return Reason Information",
            "description": "Extracts and maps return reason code and additional text from field 72, with default values if not specified",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data",
                            "logic": {
                                "reason_code": { "if": [
                                    {"var": "data.SwiftMT.fields.72.information"},
                                    { "reduce": [
                                        {"var": "data.SwiftMT.fields.72.information"},
                                        { "if": [
                                            { "and": [
                                                {"==": [{"var": "accumulator"}, ""]},
                                                { "or": [
                                                    {"starts_with": [{"var": "current"}, "/AC"]},
                                                    {"starts_with": [{"var": "current"}, "/REAS/"]}
                                                ]}
                                            ]},
                                            { "if": [
                                                { "and": [
                                                    {"starts_with": [{"var": "current"}, "/"]},
                                                    {">=": [{"length": [{"var": "current"}]}, 6]}
                                                ]},
                                                {
                                                    "substr": [{"var": "current"}, 1, 4]
                                                },
                                                { "if": [
                                                    {"starts_with": [{"var": "current"}, "/REAS/"]},
                                                    {"substr": [{"var": "current"}, 6]},
                                                    ""
                                                ]}
                                            ]},
                                            {"var": "accumulator"}
                                        ]},
                                        ""
                                    ]},
                                    ""
                                ]},
                                "additional_text": { "if": [
                                    {"var": "data.SwiftMT.fields.72.information"},
                                    {"var": "data.SwiftMT.fields.72.information"},
                                    []
                                ]}
                            }
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrRsnInf",
                            "logic": {
                                "Rsn": {
                                    "Cd": { "if": [
                                        { "and": [
                                            {"var": "temp_data.reason_code"},
                                            {"!=": [{"var": "temp_data.reason_code"}, ""]}
                                        ]},
                                        {"var": "temp_data.reason_code"},
                                        "NARR"
                                    ]}
                                },
                                "AddtlInf": { "if": [
                                    { "and": [
                                        {"var": "temp_data.additional_text"},
                                        {">": [{"length": [{"var": "temp_data.additional_text"}]}, 0]}
                                    ]},
                                    {"var": "temp_data.additional_text"},
                                    null
                                ]}
                            }
                        }
                    ]
                }
            }
        },
        {
            "id": "map_optional_fields",
            "name": "Map Optional Fields",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.SttlmTmIndctn",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.13C"},
                                {
                                    "DbtDtTm": { "if": [
                                        { "and": [
                                            {"var": "data.SwiftMT.fields.13C.sndtime"},
                                            {"var": "data.SwiftMT.fields.13C.sndtime.time"}
                                        ]},
                                        {
                                            "cat": [
                                                "0001-01-01T",
                                                {
                                                    "substr": [{"var": "data.SwiftMT.fields.13C.sndtime.time"}, 0, 2]
                                                },
                                                ":",
                                                {
                                                    "substr": [{"var": "data.SwiftMT.fields.13C.sndtime.time"}, 2, 2]
                                                },
                                                ":00",
                                                {"var": "data.SwiftMT.fields.13C.sndtime.offset"}
                                            ]
                                        },
                                        null
                                    ]},
                                    "CdtDtTm": { "if": [
                                        { "and": [
                                            {"var": "data.SwiftMT.fields.13C.rnctime"},
                                            {"var": "data.SwiftMT.fields.13C.rnctime.time"}
                                        ]},
                                        {
                                            "cat": [
                                                "0001-01-01T",
                                                {
                                                    "substr": [{"var": "data.SwiftMT.fields.13C.rnctime.time"}, 0, 2]
                                                },
                                                ":",
                                                {
                                                    "substr": [{"var": "data.SwiftMT.fields.13C.rnctime.time"}, 2, 2]
                                                },
                                                ":00",
                                                {"var": "data.SwiftMT.fields.13C.rnctime.offset"}
                                            ]
                                        },
                                        null
                                    ]}
                                },
                                null
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrdInstdAmt.@Ccy",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.33B.currency"},
                                {"var": "data.SwiftMT.fields.33B.currency"},
                                ""
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrdInstdAmt.$value",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.33B.amount"},
                                {"+": {"var": "data.SwiftMT.fields.33B.amount"}},
                                0.0
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.XchgRate",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.36.rate"},
                                {"+": {"var": "data.SwiftMT.fields.36.rate"}},
                                0.0
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.OrgnlTxRef.PmtTpInf.SvcLvl",
                            "logic": { "if": [
                                { "or": [
                                    {"var": "data.SwiftMT.user_header.service_type_identifier"},
                                    {"var": "data.SwiftMT.user_header.111"}
                                ]},
                                { "if": [
                                    { "or": [
                                        {"matches": [{"var": "data.SwiftMT.user_header.service_type_identifier"}, "^00[1-9]$"]},
                                        {"matches": [{"var": "data.SwiftMT.user_header.111"}, "^00[1-9]$"]}
                                    ]},
                                    [
                                        {
                                            "Cd": {
                                                "cat": [
                                                    "G",
                                                    { "if": [
                                                        {"var": "data.SwiftMT.user_header.service_type_identifier"},
                                                        {"var": "data.SwiftMT.user_header.service_type_identifier"},
                                                        {"var": "data.SwiftMT.user_header.111"}
                                                    ]}
                                                ]
                                            }
                                        }
                                    ],
                                    null
                                ]},
                                null
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "TR009_extract_field_72_charges",
            "name": "TR009: Extract Charges from Field 72 /CHGS/",
            "description": "Implements TR009 logic to extract charges from field 72 /CHGS/ when 71F and 71G are absent",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.charges_from_field_72",
                            "logic": { "if": [
                                { "and": [
                                    {"!": {"var": "data.SwiftMT.fields.71F"}},
                                    {"!": {"var": "data.SwiftMT.fields.71G"}},
                                    {"var": "data.SwiftMT.fields.72.information"}
                                ]},
                                { "reduce": [
                                    {"var": "data.SwiftMT.fields.72.information"},
                                    { "if": [
                                        {"starts_with": [{"var": "current"}, "/CHGS/"]},
                                        {"substr": [{"var": "current"}, 6]},
                                        {"var": "accumulator"}
                                    ]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.parsed_chgs_currency",
                            "logic": { "if": [
                                {"var": "temp_data.charges_from_field_72"},
                                {
                                    "substr": [{"var": "temp_data.charges_from_field_72"}, 0, 3]
                                },
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.parsed_chgs_amount",
                            "logic": { "if": [
                                {"var": "temp_data.charges_from_field_72"},
                                {"substr": [{"var": "temp_data.charges_from_field_72"}, 3]},
                                ""
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "map_charges_information",
            "name": "Map Charges Information with TR009 Support",
            "description": "Constructs charges information array from fields 71F, 71G, and field 72 /CHGS/ (TR009), mapping sender and receiver charges with amounts and agent details",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data",
                            "logic": {
                                "charge_71f": { "if": [
                                    {"var": "data.SwiftMT.fields.71F"},
                                    { "if": [
                                        {"var": "data.SwiftMT.fields.71F.0"},
                                        {
                                            "Amt": {
                                                "@Ccy": {"var": "data.SwiftMT.fields.71F.0.currency"},
                                                "$value": {"var": "data.SwiftMT.fields.71F.0.amount"}
                                            },
                                            "Agt": {"FinInstnId": {"Nm": "NOTPROVIDED", "PstlAdr": {"AdrLine": ["NOTPROVIDED"]}}}
                                        },
                                        {
                                            "Amt": {
                                                "@Ccy": {"var": "data.SwiftMT.fields.71F.currency"},
                                                "$value": {"var": "data.SwiftMT.fields.71F.amount"}
                                            },
                                            "Agt": {"FinInstnId": {"Nm": "NOTPROVIDED", "PstlAdr": {"AdrLine": ["NOTPROVIDED"]}}}
                                        }
                                    ]},
                                    null
                                ]},
                                "charge_71g": { "if": [
                                    {"var": "data.SwiftMT.fields.71G"},
                                    {
                                        "Amt": {
                                            "@Ccy": {"var": "data.SwiftMT.fields.71G.currency"},
                                            "$value": {"var": "data.SwiftMT.fields.71G.amount"}
                                        },
                                        "Agt": {"FinInstnId": {"BICFI": {"var": "temp_data.Receiver"}}}
                                    },
                                    null
                                ]},
                                "charge_field_72": { "if": [
                                    {"var": "temp_data.charges_from_field_72"},
                                    {
                                        "Amt": {"@Ccy": {"var": "temp_data.parsed_chgs_currency"}, "$value": 0.0},
                                        "Agt": {"FinInstnId": {"Nm": "NOTPROVIDED", "PstlAdr": {"AdrLine": ["NOTPROVIDED"]}}}
                                    },
                                    null
                                ]}
                            }
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.ChrgsInf",
                            "logic": { "if": [
                                {"var": "temp_data.charge_71f"},
                                [{"var": "temp_data.charge_71f"}],
                                { "if": [
                                    {"var": "temp_data.charge_71g"},
                                    [{"var": "temp_data.charge_71g"}],
                                    []
                                ]}
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "extract_ultimate_parties_field_70",
            "name": "Extract Ultimate Parties Information from Field 70",
            "description": "Extracts ultimate creditor (/ULTB/) and ultimate debtor (/ULTD/) information from field 70 per specification",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.ultimate_creditor_line",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.70.narrative"},
                                { "reduce": [
                                    {"var": "data.SwiftMT.fields.70.narrative"},
                                    { "if": [
                                        {"starts_with": [{"var": "current"}, "/ULTB/"]},
                                        {"substr": [{"var": "current"}, 6]},
                                        {"var": "accumulator"}
                                    ]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.ultimate_debtor_line",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.70.narrative"},
                                { "reduce": [
                                    {"var": "data.SwiftMT.fields.70.narrative"},
                                    { "if": [
                                        {"starts_with": [{"var": "current"}, "/ULTD/"]},
                                        {"substr": [{"var": "current"}, 6]},
                                        {"var": "accumulator"}
                                    ]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.ultimate_creditor_name",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_creditor_line"},
                                { "if": [
                                    {"includes": [{"var": "temp_data.ultimate_creditor_line"}, "/"]},
                                    {"split": [{"var": "temp_data.ultimate_creditor_line"}, "/", 0]},
                                    {"var": "temp_data.ultimate_creditor_line"}
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.ultimate_creditor_country",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_creditor_line"},
                                { "if": [
                                    {"includes": [{"var": "temp_data.ultimate_creditor_line"}, "/"]},
                                    {"split": [{"var": "temp_data.ultimate_creditor_line"}, "/", 1]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.ultimate_debtor_name",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_debtor_line"},
                                { "if": [
                                    {"includes": [{"var": "temp_data.ultimate_debtor_line"}, "/"]},
                                    {"split": [{"var": "temp_data.ultimate_debtor_line"}, "/", 0]},
                                    {"var": "temp_data.ultimate_debtor_line"}
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.ultimate_debtor_country",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_debtor_line"},
                                { "if": [
                                    {"includes": [{"var": "temp_data.ultimate_debtor_line"}, "/"]},
                                    {"split": [{"var": "temp_data.ultimate_debtor_line"}, "/", 1]},
                                    ""
                                ]},
                                ""
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "map_ultimate_parties",
            "name": "Map Ultimate Parties with MT_To_MXUltimateParty Logic",
            "description": "Maps ultimate creditor and debtor information with proper name, country, and other ID parsing per specification",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrChain.UltmtCdtr",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_creditor_name"},
                                {
                                    "Nm": {"var": "temp_data.ultimate_creditor_name"},
                                    "PstlAdr": { "if": [
                                        {"var": "temp_data.ultimate_creditor_country"},
                                        {"Ctry": {"var": "temp_data.ultimate_creditor_country"}},
                                        null
                                    ]}
                                },
                                null
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrChain.UltmtDbtr",
                            "logic": { "if": [
                                {"var": "temp_data.ultimate_debtor_name"},
                                {
                                    "Nm": {"var": "temp_data.ultimate_debtor_name"},
                                    "PstlAdr": { "if": [
                                        {"var": "temp_data.ultimate_debtor_country"},
                                        {"Ctry": {"var": "temp_data.ultimate_debtor_country"}},
                                        null
                                    ]}
                                },
                                null
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "POSTC001_dummy_returned_instructed_amount",
            "name": "POSTC001: Create Dummy ReturnedInstructedAmount when ChargesInformation Present",
            "description": "Implements POSTC001 to create dummy ReturnedInstructedAmount meeting UG rules when charges are present",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrdInstdAmt",
                            "logic": { "if": [
                                { "and": [
                                    {"var": "data.Document.PmtRtr.TxInf.ChrgsInf"},
                                    {"!": {"var": "data.SwiftMT.fields.33B"}}
                                ]},
                                { "if": [
                                    {"!": {"var": "data.SwiftMT.fields.36"}},
                                    {"@Ccy": {"var": "data.SwiftMT.fields.32A.currency"}, "$value": 0.0},
                                    {
                                        "@Ccy": { "if": [
                                            {"!=": [{"var": "data.SwiftMT.fields.32A.currency"}, "EUR"]},
                                            "EUR",
                                            "USD"
                                        ]},
                                        "$value": 0.0
                                    }
                                ]},
                                null
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "extract_regulatory_reporting_field_77B",
            "name": "Extract Regulatory Reporting from Field 77B",
            "description": "Extract country of residence for creditor (BENEFRES) and debtor (ORDERRES) from field 77B per specification",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.benefres_country",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.77B.narrative"},
                                { "reduce": [
                                    {"var": "data.SwiftMT.fields.77B.narrative"},
                                    { "if": [
                                        { "and": [
                                            {"==": [{"var": "accumulator"}, ""]},
                                            {"match": [{"var": "current"}, "/BENEFRES/[A-Z]{2}"]}
                                        ]},
                                        {
                                            "substr": [{"var": "current"}, 10, 2]
                                        },
                                        {"var": "accumulator"}
                                    ]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "temp_data.orderres_country",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.77B.narrative"},
                                { "reduce": [
                                    {"var": "data.SwiftMT.fields.77B.narrative"},
                                    { "if": [
                                        { "and": [
                                            {"==": [{"var": "accumulator"}, ""]},
                                            {"match": [{"var": "current"}, "/ORDERRES/[A-Z]{2}"]}
                                        ]},
                                        {
                                            "substr": [{"var": "current"}, 10, 2]
                                        },
                                        {"var": "accumulator"}
                                    ]},
                                    ""
                                ]},
                                ""
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrChain.Cdtr.Pty.PstlAdr",
                            "logic": { "if": [
                                { "and": [
                                    {"var": "temp_data.benefres_country"},
                                    {"!=": [{"var": "temp_data.benefres_country"}, ""]}
                                ]},
                                {"Ctry": {"var": "temp_data.benefres_country"}},
                                null
                            ]}
                        },
                        {
                            "path": "data.MxEnvelope.Document.PmtRtr.TxInf.RtrChain.Dbtr.Pty.PstlAdr",
                            "logic": { "if": [
                                { "and": [
                                    {"var": "temp_data.orderres_country"},
                                    {"!=": [{"var": "temp_data.orderres_country"}, ""]}
                                ]},
                                {"Ctry": {"var": "temp_data.orderres_country"}},
                                null
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "publish_return_document_xml",
            "name": "Publish Return Document XML",
            "description": "Generates the pacs.004 document XML output for MT103 return processing using the PublishMX function",
            "function": {"name": "publish_mx", "input": {"source": "MxEnvelope", "target": "result"}}
        }
    ]
}
