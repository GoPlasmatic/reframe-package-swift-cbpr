{
    "id": "mt205retn-precondition",
    "name": "MT205 RETN Message Precondition",
    "description": "Precondition checks for MT205 RETN message for payment return scenarios",
    "priority": 4,
    "condition": { "and": [
        {"==": [{"var": "metadata.direction"}, "outgoing"]},
        {"==": [{"var": "metadata.SwiftMT.message_type"}, "205"]},
        {"==": [{"var": "metadata.SwiftMT.method"}, "return"]},
        {"==": [{"var": "metadata.progress.workflow_id"}, "mt205retn-bah-mapper"]},
        {"==": [{"var": "metadata.progress.task_id"}, "map_related_message_metadata"]},
        {"==": [{"var": "metadata.progress.status_code"}, 200]}
    ]},
    "tasks": [
        {
            "id": "PREC001_validate_temp_variables",
            "name": "PREC001: Validate Temp Variables from TR001",
            "description": "Ensure Temp~Sender and Temp~Receiver are properly defined from BAH translation",
            "function": {
                "name": "validate",
                "input": {
                    "rules": [
                        {
                            "path": "temp_data",
                            "logic": { "and": [
                                {"var": "temp_data.Sender"},
                                {"var": "temp_data.Receiver"},
                                {"!=": [{"var": "temp_data.Sender"}, "NOTPROVIDED"]},
                                {"!=": [{"var": "temp_data.Receiver"}, "NOTPROVIDED"]}
                            ]},
                            "message": "T20087: Translation stopped: TempSender or TempReceiver is not properly provided from TR001"
                        }
                    ]
                }
            }
        },
        {
            "id": "PREC002_validate_mandatory_fields",
            "name": "PREC002: Validate Mandatory MT205 Fields",
            "description": "Ensure mandatory fields for MT205 RETN are present and valid",
            "function": {
                "name": "validate",
                "input": {
                    "rules": [
                        {
                            "path": "data",
                            "logic": { "and": [
                                {"exists": ["data", "SwiftMT", "fields", "20", "reference"]},
                                {"exists": ["data", "SwiftMT", "fields", "21", "reference"]},
                                {"exists": ["data", "SwiftMT", "fields", "32A"]},
                                {"exists": ["data", "SwiftMT", "fields", "32A", "value_date"]},
                                {"exists": ["data", "SwiftMT", "fields", "32A", "currency"]},
                                {"exists": ["data", "SwiftMT", "fields", "32A", "amount"]},
                                {"exists": ["data", "SwiftMT", "fields", "72", "information"]},
                                {"!=": [{"var": "data.SwiftMT.fields.20.reference"}, ""]},
                                {"!=": [{"var": "data.SwiftMT.fields.21.reference"}, ""]},
                                {"!=": [{"var": "data.SwiftMT.fields.32A.currency"}, ""]},
                                {"!=": [{"var": "data.SwiftMT.fields.32A.value_date"}, ""]},
                                {">=": [{"var": "data.SwiftMT.fields.32A.amount"}, 0]}
                            ]},
                            "message": "T20087: Translation stopped: Mandatory MT205 fields (20, 21, 32A, 72) are missing or invalid"
                        },
                        {
                            "path": "data",
                            "logic": { "or": [
                                {"exists": ["data", "SwiftMT", "user_header", "unique_end_to_end_reference"]},
                                {"exists": ["data", "SwiftMT", "user_header", "121"]},
                                {"exists": ["data", "SwiftMT", "user_header", "field_121"]}
                            ]},
                            "message": "T20007: Translation stopped: UETR is required for MT205 RETN messages"
                        }
                    ]
                }
            }
        },
        {
            "id": "PREC003_validate_field72_structure",
            "name": "PREC003: Validate Field 72 Structure for RETN",
            "description": "Validate field 72 has proper structure: Line 1 /RETN/, Line 2 /2!c2!n/, Line 3 /MREF/",
            "function": {
                "name": "validate",
                "input": {
                    "rules": [
                        {
                            "path": "data",
                            "logic": { "and": [
                                {"var": "data.SwiftMT.fields.72.information"},
                                {">=": [{"length": {"var": "data.SwiftMT.fields.72.information"}}, 3]},
                                {"starts_with": [{"var": "data.SwiftMT.fields.72.information.0"}, "/RETN/"]}
                            ]},
                            "message": "T20314: Field 72 line 1 must start with /RETN/ for return messages"
                        },
                        {
                            "path": "data",
                            "logic": { "if": [
                                {"starts_with": [{"var": "data.SwiftMT.fields.72.information.0"}, "/RETN/"]},
                                {"==": [{"length": {"var": "data.SwiftMT.fields.72.information.1"}}, 6]},
                                true
                            ]},
                            "message": "T20314: Field 72 line 2 must start with pattern /2!c2!n/ when line 1 is /RETN/"
                        },
                        {
                            "path": "data",
                            "logic": { "if": [
                                {"starts_with": [{"var": "data.SwiftMT.fields.72.information.0"}, "/RETN/"]},
                                {"starts_with": [{"var": "data.SwiftMT.fields.72.information.2"}, "/MREF/"]},
                                true
                            ]},
                            "message": "T20314: Field 72 line 3 must start with /MREF/ when line 1 is /RETN/"
                        }
                    ]
                }
            }
        },
        {
            "id": "PREC004_extract_and_validate_mref",
            "name": "PREC004: Extract and Validate Original Instruction ID from MREF",
            "description": "Extract MREF and validate it doesn't start/end with '/' or contain '//'",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.original_instruction_id",
                            "logic": { "if": [
                                { "and": [
                                    {"var": "data.SwiftMT.fields.72.information.2"},
                                    {"starts_with": [{"var": "data.SwiftMT.fields.72.information.2"}, "/MREF/"]}
                                ]},
                                {"substr": [{"var": "data.SwiftMT.fields.72.information.2"}, 6]},
                                "NOTPROVIDED"
                            ]}
                        },
                        {
                            "path": "temp_data.return_reason_code",
                            "logic": { "if": [
                                {"var": "data.SwiftMT.fields.72.information.1"},
                                {
                                    "substr": [{"var": "data.SwiftMT.fields.72.information.1"}, 1, 4]
                                },
                                "NARR"
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "PREC004_validate_mref_format",
            "name": "PREC004: Validate MREF Format",
            "description": "Validate MREF doesn't start/end with '/' or contain '//' ",
            "function": {
                "name": "validate",
                "input": {
                    "rules": [
                        {
                            "path": "temp_data",
                            "logic": { "if": [
                                { "and": [
                                    {"var": "temp_data.original_instruction_id"},
                                    {"!=": [{"var": "temp_data.original_instruction_id"}, "NOTPROVIDED"]},
                                    {">": [{"length": {"var": "temp_data.original_instruction_id"}}, 0]}
                                ]},
                                {
                                    "!": { "or": [
                                        {"starts_with": [{"var": "temp_data.original_instruction_id"}, "/"]},
                                        {"ends_with": [{"var": "temp_data.original_instruction_id"}, "/"]},
                                        {"in": ["//", {"var": "temp_data.original_instruction_id"}]}
                                    ]}
                                },
                                true
                            ]},
                            "message": "T20316: Original instruction ID must not start/end with '/' or contain '//'"
                        }
                    ]
                }
            }
        },
        {
            "id": "extract_field72_components",
            "name": "Extract Field 72 Components",
            "description": "Extract TREF, CHGS, and TEXT components from field 72",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.field_72_tref",
                            "logic": { "reduce": [
                                {"var": "data.SwiftMT.fields.72.information"},
                                { "if": [
                                    {"starts_with": [{"var": "current"}, "/TREF/"]},
                                    {"substr": [{"var": "current"}, 6]},
                                    {"var": "accumulator"}
                                ]},
                                null
                            ]}
                        },
                        {
                            "path": "temp_data.field_72_text_lines",
                            "logic": {
                                "filter": [
                                    {"var": "data.SwiftMT.fields.72.information"},
                                    {"starts_with": [{"var": ""}, "/TEXT/"]}
                                ]
                            }
                        },
                        {
                            "path": "temp_data.additional_information",
                            "logic": { "if": [
                                {">": [{"length": {"var": "temp_data.field_72_text_lines"}}, 0]},
                                {"map": [{"var": "temp_data.field_72_text_lines"}, {"substr": [{"var": ""}, 6]}]},
                                []
                            ]}
                        }
                    ]
                }
            }
        },
        {
            "id": "PREC005_validate_serial_fields",
            "name": "PREC005: Validate Serial Payment Fields",
            "description": "Validate presence of serial payment specific fields (53B, 54B, 55B)",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {
                            "path": "temp_data.has_reimbursement_agents",
                            "logic": { "or": [
                                {"exists": ["data", "SwiftMT", "fields", "53B"]},
                                {"exists": ["data", "SwiftMT", "fields", "54B"]},
                                {"exists": ["data", "SwiftMT", "fields", "55B"]}
                            ]}
                        },
                        {
                            "path": "temp_data.serial_payment_type",
                            "logic": { "if": [
                                {"var": "temp_data.has_reimbursement_agents"},
                                "SERIAL",
                                "DIRECT"
                            ]}
                        },
                        {
                            "path": "temp_data.amount_value",
                            "logic": {"var": "data.SwiftMT.fields.32A.amount"}
                        },
                        {
                            "path": "temp_data.value_date",
                            "logic": {"var": "data.SwiftMT.fields.32A.value_date"}
                        },
                        {"path": "temp_data.currency", "logic": {"var": "data.SwiftMT.fields.32A.currency"}}
                    ]
                }
            }
        },
        {
            "id": "MT205RETN_set_return_translation",
            "name": "MT205 RETN: Set to pacs.004 Translation",
            "description": "MT205 RETN translates to pacs.004 payment return",
            "function": {
                "name": "map",
                "input": {
                    "mappings": [
                        {"path": "temp_data.MTType", "logic": "RETURN"},
                        {"path": "temp_data.translation_target", "logic": "pacs.004"},
                        {
                            "path": "warnings",
                            "logic": { "if": [
                                {"var": "temp_data.has_reimbursement_agents"},
                                [
                                    {
                                        "code": "T20235",
                                        "message": "Serial payment with reimbursement agents detected. Ensure proper mapping of fields 53B, 54B, 55B",
                                        "severity": "WARNING",
                                        "field": "53B/54B/55B"
                                    }
                                ],
                                []
                            ]}
                        }
                    ]
                }
            }
        }
    ]
}
